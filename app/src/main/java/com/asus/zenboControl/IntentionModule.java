package com.asus.zenboControl;import android.content.Context;import android.util.Log;import com.asus.robotframework.API.RobotFace;import com.asus.zenboControl.listener.OnRobotAPIManagerListener;import org.json.JSONObject;import java.util.HashMap;/** * Created by Kenny on 2016/2/22. */public class IntentionModule implements OnRobotAPIManagerListener {    private final static boolean DBG = true;    private String LogTag = IntentionModule.class.getSimpleName();    private static IntentionModule mInstance = null;    private Context mContext;    private RobotAPIManager mRobotAPIManager;    private HashMap<String, String> contextSetHash = new HashMap<String, String>();    private Domain mDomain;    private InfoState mInfoState = InfoState.NORMAL;    private int mSluFailCount;    private int restartWaitTime;    private String mSentenceStr = null;    private String resultMsg;    private String appId;    private String appValue;    private String appIntention;    private String appContextSet = null;    public enum InfoState {        NORMAL, INFO, CANCEL;        public String toString() {            switch (this) {                case NORMAL:                    return "Normal";                case INFO:                    return "Info";                case CANCEL:                    return "Cancel";                default:                    return "UnknowEvent";            }        }    }    public enum Domain {        BLOCKLY("1207");        private String value;        private Domain(String value) {            this.value = value;        }        public String getValue() {            return value;        }        public String toString() {            switch (this) {                case BLOCKLY:                    return "BLOCKLY";                default:                    return "UnknowEvent";            }        }    }    public static IntentionModule getInstance(Context context) {        //Create singleton to contain all PerceptionModule        initialize(context);        return mInstance;    }    /**     * Initialize singleton mInstance with PerceptionModule info     */    public static void initialize(Context context) {        if (mInstance == null) {            mInstance = new IntentionModule(context);        }    }    private IntentionModule(Context context) {        if (DBG)            Log.d(LogTag, "IntentionModule");        mContext = context;        initRobotAPI();    }    private void initRobotAPI() {        mRobotAPIManager = RobotAPIManager.getInstance(mContext);        mRobotAPIManager.setOnRobotAPIManagerListener(IntentionModule.this);        mDomain = Domain.BLOCKLY;        mRobotAPIManager.setDomain(mDomain.getValue());//        hideEmotion();    }    public void ZenboSay(String string){        if(mRobotAPIManager != null){            mRobotAPIManager.RobotSay(string);        }    }    public String getAPIVersion(){        return mRobotAPIManager.getAPIVersion();    }    public void stopSpeakAndListen() {        mRobotAPIManager.stopSpeakAndListen();    }    public void setExpression(RobotFace robotFace) {        mRobotAPIManager.setExpression(robotFace);    }    public void setExpressionAndSpeak(RobotFace robotFace, String tts){        mRobotAPIManager.setExpressionAndSpeak(robotFace, tts);    }    public void ledWledWheel(String side, String type, String color, int ledNumber, int brightness, int duration) {        mRobotAPIManager.checkRobotAPI();        mRobotAPIManager.ledWheel(side, type, color, ledNumber, brightness, duration);    }    public void disableSound(){        if(mRobotAPIManager != null){            mRobotAPIManager.disableSound();        }    }    public void registerListenRobotAPICallback() {        if (mRobotAPIManager != null) {            mRobotAPIManager.registerListenRobotAPICallback();        }    }    public void onDestroy() {        if (DBG)            Log.i(LogTag, "onStop" + " mDomain " + mDomain + " this.mDomain " + this.mDomain);        if (mRobotAPIManager != null) {            mRobotAPIManager.onDestroy();        }        mSentenceStr = null;        restartWaitTime = 500;//            mInstance = null;    }    @Override    public void onSluResult(JSONObject app_semantic, String errorCode) {        if (errorCode.contains("timeout") || errorCode.contains("timed out")) {            mRobotAPIManager.stopWait();            onTimeOut();        } else if (errorCode.contains("slu_askBack") || errorCode.contains("csr_failed")) {        } else if (!errorCode.contains("slu_cancel")) {            mRobotAPIManager.stopWait();           // Log.i(LogTag, "***--> mInfoState " + mInfoState + " mOnInfoUIControlListener " + mOnInfoUIControlListener + "  error_code=" + errorCode);            controlIntentionsAndStartTtsCsrSlu(app_semantic);        }    }    @Override    public void onRetry(String askBack) {        mRobotAPIManager.stopWait();        if (mSluFailCount > 1) {            mSluFailCount = 0;            onTimeOut();        }        mSluFailCount++;        Log.i(LogTag, "***--> askBack " + askBack);        if (askBack != null) {            mSentenceStr = askBack;        }    }    @Override    public void onResultMsg(String resultMsg) {        this.resultMsg = resultMsg;    }    @Override    public void onTimeOut() {    }    private void controlIntentionsAndStartTtsCsrSlu(JSONObject app_semantic) {    }    public void hideEmotion() {        Log.e(LogTag, "hideEmotion");        mRobotAPIManager.hideEmotion();    }}